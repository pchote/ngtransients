#!/usr/bin/env python3
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""
   show-targets.py

   This script generates displays target positions from an output file
   from generate-target-list.py over the associated reference frame.
"""

# pylint: disable=invalid-name

import argparse as ap
import numpy as np
import os
import astropy.io.fits as fits
import pyds9

if __name__ == "__main__":
    parser = ap.ArgumentParser(description="Displays target positions on the reference frame.")
    parser.add_argument('input',
                        type=str,
                        help='Input fits file generated by generate-target-list.py.')
    parser.add_argument('--reference-frame-path',
                        type=str,
                        default='.',
                        help='Path to the directory where reference frames are stored')
    parser.add_argument('--ds9-title',
                        type=str,
                        default='show-targets',
                        help='DS9 window to use.')
    args = parser.parse_args()

    with fits.open(args.input) as target_fits:
        refmask = target_fits[0].header['REFMASK']
        targets = target_fits[1].data

    with fits.open(os.path.join(args.reference_frame_path, refmask)) as reference:
        # pylint: disable=no-member
        reference_image = reference[0].data.astype(np.float64)
        # pylint: enable=no-member

    ds9_window = pyds9.DS9(args.ds9_title)
    ds9_window.set_np2arr(reference_image)

    for t in targets:
        ds9_window.set('regions', 'image; point({},{}) # point=cross'.format(t['x'] + 1,
                                                                             t['y'] + 1))
